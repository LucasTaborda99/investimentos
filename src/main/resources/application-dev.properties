# Importa configurações adicionais de um arquivo externo chamado .env.properties de forma opcional
spring.config.import=optional:file:.env.properties

# Define a URL de conexão com o banco de dados MySQL. Aqui, "localhost" indica que o banco está rodando na máquina local,
# "3306" é a porta padrão do MySQL, e "investimentos" é o nome do banco de dados.
spring.datasource.url=${DATABASE_URL}

# Define o nome de usuário para se conectar ao banco de dados, obtido de uma variável de ambiente chamada MYSQL_USER
spring.datasource.username=${MYSQL_USER}

# Define a senha para se conectar ao banco de dados, também obtida de uma variável de ambiente chamada MYSQL_PASSWORD
spring.datasource.password=${MYSQL_PASSWORD}

# Configura o Hibernate para atualizar automaticamente o esquema do banco de dados com base nas entidades Java.
spring.jpa.hibernate.ddl-auto=update

# Habilita a exibição das consultas SQL no console para facilitar o debug e acompanhamento
spring.jpa.show-sql=true

# Configura a formatação das consultas SQL no console, deixando-as mais legíveis
spring.jpa.properties.hibernate.format_sql=true

# Define explicitamente o dialeto do MySQL 8 para otimizar a comunicação com o banco de dados
logging.level.org.springframework.security=DEBUG

# Define a porta em que o servidor Spring Boot será executado, neste caso, 8083
server.port=8083

# Configurando documentação da api, utilizando o Swagger
#Disable Whitelabel Error Page
server.error.whitelabel.enabled = false
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Configurando o openRouter API Key
openrouter.api.key=${OPENROUTER_TOKEN}

